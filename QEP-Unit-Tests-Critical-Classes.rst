.. _qep#[.#]:

================================================================
QGIS Enhancement #: Required unit testing for "critical" classes
================================================================

:Date: 2015/10/20
:Author: Nyall Dawson
:Contact: nyall dot dawson at gmail dot com
:Last Edited: 2015/10/20
:Status:  Draft

1. Summary
----------

This QEP describes a system of classifying certain classes within the QGIS codebase as critical
classes and proposes that no changes be allowed to these classes without accompanying unit
tests.

While QGIS contributor guidelines state that all changes to code within CORE be accompanied
by unit tests, this requirement is universally ignored. However, since the introduction of CI
testing of every commit and pull request to master the value of writing tests to prevent
regressions has tremendously increased. It is acknowledged that introduction of unit tests
does not automatically fix bugs, but it does help drastically reduce the potential of regressions.

This QEP describes a middle-ground approach to requiring compulsory unit tests for certain areas
of the codebase without placing too much additional burden on developers.

It is based on a well-defined minimal required test suite, and does not prevent
developers from writing additional tests or requiring tests for classes not
covered by this QEP.

2. Proposal
-------------

Any change to a class which is classified as "CRITICAL" MUST be accompanied by 
unit testing to prevent regressions.

Pull requests which touch upon CRITICAL classes and which do not have unit
tests must NOT be merged to master, and commits pushed to master which
also violate this will be reverted.

2.1 Definition of CRITICAL classes
..................................

For a class to be classified as a CRITICAL class it must satisfy two requirements:

2.1.1 The class must relate to code which has:
..............................................

- Potential for data loss for users
- Risk of incorrect calculations resulting in invalid analysis (eg, incorrect area
or distance calculations)

This excludes code which relates to purely cosmetic components, eg symbology,
labeling, conditional styles, etc. The requirement is intended to identify areas
where regressions would result in significant harm to the reputation of QGIS
or potential risk of incorrect analysis products generated by QGIS and the wider
risks this entails.

2.1.2 The class must have 100% unit test coverage (or as close as possible)
...........................................................................

This requirement is intended to reduce the workload on developers. While it is
relatively straightforward to adopt existing unit tests to cover new code, it
can be quite burdensome or complex to start creation of unit tests from scratch.
Requiring all changes to classes which satisfy 2.1.1 to have unit tests would likely
push away potential contributors who do not have the time or skill required
to write unit tests from scratch.

Accordingly, a class can only be categorised as CRITICAL when it already has
100% existing unit test coverage.

3. Proposed Technical Solution
------------------------------

When a class is categorised as CRITICAL, comments will be added to the source
code to warn developers that all changes must be accompanied by unit tests.
These would take the form of the line:

// CRITICAL code - changes must be accompanied with unit tests in testqgsfield.cpp

placed within the header, and between each function definition in the class cpp file.

The contributor guidelines would be updated to reflect this requirement.

For a class to be categorised as CRITICAL, a pull request will be opened which
includes the CRITICAL comment blocks for the class. The PR can then be used
for discussion regarding whether or not the class satisfies the requirements
for a critical class, specifically whether it satisfies 2.1.1.


4. Implementation Details
-------------------------

Initially, only the QgsField, QgsFields and QgsFeature classes would satisfy
the requirements for CRITICAL classes. It is the intention that the following
classes be prioritised to bring them up to CRITICAL status ASAP:

- all geometry classes
- QgsExpression
- QgsDistanceArea
- QgsStatisticalSummary

#. Voting History
-----------------

(required)
